/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pizza;

import PedidoItem.PedidoItem;
import Pedido.Pedido;
import Pedido.PedidoDaoImpl;
import Pedido.PedidoDao;
import PedidoItem.PedidoItemDao;
import PedidoItem.PedidoItemDaoImpl;
import cliente.Cliente;
import cliente.ClienteDaoImpl;
import cliente.ClienteForm;
import connectionFactory.ConnectionFactory;
import java.io.IOException;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.table.DefaultTableModel;
import main.Main;
import sabor.Sabor;
import sabor.SaborDao;
import sabor.SaborDaoImpl;
import tipo.TipoDao;
import tipo.TipoDaoImpl;

/**
 *
 * @author lipe1
 */
public class PizzaForm extends javax.swing.JFrame {

    /**
     * Creates new form PizzaForm
     */
    private final Main telaPrincipal;
    private int id_cliente;
    private Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");
    private DefaultTableModel modelPedidoItem;
    private int id_item_pedido = 0;
    
    public PizzaForm(Main telaPrincipal, int idCliente) {
        initComponents();
        this.telaPrincipal = telaPrincipal;
        this.id_cliente = idCliente;
        
        lbErroDimensao.setVisible(false);
        lbErroQuantidade.setVisible(false);
        lbErroSabor.setVisible(false);
        lbErroItem.setVisible(false);
        msgGenerica.setVisible(false);
        lbErroSabor.setVisible(false);
        ValorTotal.setVisible(false);
        circulotp.setSelected(true);
        UpdateComboBox();
        
        this.modelPedidoItem = new DefaultTableModel();
        tabelaItens.setModel(this.modelPedidoItem);
        this.modelPedidoItem.addColumn("ID");
        this.modelPedidoItem.addColumn("SABOR 1");
        this.modelPedidoItem.addColumn("TIPO");
        this.modelPedidoItem.addColumn("SABOR 2");
        this.modelPedidoItem.addColumn("TIPO");
        this.modelPedidoItem.addColumn("FORMA");
        this.modelPedidoItem.addColumn("VALOR ITEM");
        imprimeTodosPedidosItens(this.id_cliente);
    }
     
    private void UpdateComboBox(){
           Connection con;
        try {
            con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
            SaborDao sDao = new SaborDaoImpl(con);
            String str=null;
            for (Sabor s : sDao.buscarTodos("")) {
                sabor1Cb.addItem(s.getNome());
                sabor2Cb.addItem(s.getNome());
            }
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void imprimeTodosPedidosItens(int idCliente) {
        apagaTabelaPedidos();
        Connection con;
        try {
            con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
            PedidoItemDao piDao = new PedidoItemDaoImpl(con);
            String str=null;
            for (PedidoItem pi : piDao.buscarTodosPedidosItens(buscaItens.getText(), idCliente)) {
                Locale localeBR = new Locale( "pt", "BR" );   
                NumberFormat dinheiroBR = NumberFormat.getCurrencyInstance(localeBR);  
                Double currentTotal = pi.getValor();
                this.modelPedidoItem.addRow(new Object[]{pi.getId(), pi.getSabor1().getNome(), pi.getSabor1().getNomeTipo(),
                                            pi.getSabor2().getNome(), pi.getSabor2().getNomeTipo(), pi.getFormaNome(), dinheiroBR.format(currentTotal)});
            }
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void apagaTabelaPedidos() {
        int rowCount = this.modelPedidoItem.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            this.modelPedidoItem.removeRow(i);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        circulotp = new javax.swing.JRadioButton();
        quadradotp = new javax.swing.JRadioButton();
        triangulotp = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        quantidadetf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AdicionarPedido = new javax.swing.JButton();
        fecharBtn = new javax.swing.JButton();
        lbErroQuantidade = new javax.swing.JLabel();
        lbErroDimensao = new javax.swing.JLabel();
        dimensaotf = new javax.swing.JTextField();
        labelForma = new javax.swing.JLabel();
        lbErroItem = new javax.swing.JLabel();
        sabor2Cb = new javax.swing.JComboBox<>();
        sabor1Cb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        lbErroSabor = new javax.swing.JLabel();
        ValorTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaItens = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buscaItens = new javax.swing.JTextField();
        excluir = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        msgGenerica = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 350));
        jPanel1.setLayout(null);

        buttonGroup1.add(circulotp);
        circulotp.setText("CIRCULO");
        circulotp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circulotpActionPerformed(evt);
            }
        });
        jPanel1.add(circulotp);
        circulotp.setBounds(10, 30, 150, 20);

        buttonGroup1.add(quadradotp);
        quadradotp.setText("QUADRADO");
        quadradotp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quadradotpActionPerformed(evt);
            }
        });
        jPanel1.add(quadradotp);
        quadradotp.setBounds(10, 60, 140, 20);

        buttonGroup1.add(triangulotp);
        triangulotp.setText("TRIÂNGULO");
        triangulotp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangulotpActionPerformed(evt);
            }
        });
        jPanel1.add(triangulotp);
        triangulotp.setBounds(10, 90, 150, 20);

        jLabel1.setText("Forma:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 10, 140, 16);

        jLabel2.setText("Quantidade (cm²):");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(170, 70, 320, 16);
        jPanel1.add(quantidadetf);
        quantidadetf.setBounds(170, 90, 510, 22);

        jLabel3.setText("Sabor 2:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 220, 480, 16);

        AdicionarPedido.setText("ADICIONAR");
        AdicionarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarPedidoActionPerformed(evt);
            }
        });
        jPanel1.add(AdicionarPedido);
        AdicionarPedido.setBounds(350, 310, 330, 22);

        fecharBtn.setText("CANCELAR");
        fecharBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fecharBtnActionPerformed(evt);
            }
        });
        jPanel1.add(fecharBtn);
        fecharBtn.setBounds(10, 310, 330, 22);

        lbErroQuantidade.setForeground(new java.awt.Color(255, 0, 0));
        lbErroQuantidade.setText("Valor inválido");
        jPanel1.add(lbErroQuantidade);
        lbErroQuantidade.setBounds(170, 110, 510, 16);

        lbErroDimensao.setForeground(new java.awt.Color(255, 0, 0));
        lbErroDimensao.setText("Valor inválido");
        jPanel1.add(lbErroDimensao);
        lbErroDimensao.setBounds(170, 50, 510, 16);
        jPanel1.add(dimensaotf);
        dimensaotf.setBounds(170, 30, 510, 22);

        labelForma.setText("Entre com o raio (cm):");
        jPanel1.add(labelForma);
        labelForma.setBounds(170, 10, 310, 16);

        lbErroItem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbErroItem.setForeground(new java.awt.Color(255, 0, 0));
        lbErroItem.setText("POR FAVOR, SELECIONE UM ITEM CLICANDO NA LINHA");
        jPanel1.add(lbErroItem);
        lbErroItem.setBounds(10, 680, 370, 16);

        sabor2Cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sabor2CbActionPerformed(evt);
            }
        });
        jPanel1.add(sabor2Cb);
        sabor2Cb.setBounds(10, 240, 670, 22);

        sabor1Cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sabor1CbActionPerformed(evt);
            }
        });
        jPanel1.add(sabor1Cb);
        sabor1Cb.setBounds(10, 170, 670, 22);

        jLabel5.setText("Sabor 1:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 150, 480, 16);

        lbErroSabor.setForeground(new java.awt.Color(255, 0, 0));
        lbErroSabor.setText("Valor inválido");
        jPanel1.add(lbErroSabor);
        lbErroSabor.setBounds(10, 200, 480, 16);

        ValorTotal.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        ValorTotal.setText("0.00");
        jPanel1.add(ValorTotal);
        ValorTotal.setBounds(430, 260, 250, 40);

        tabelaItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "SABOR 1", "TIPO", "SABOR 2", "TIPO", "FORMA", "VALOR ITEM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaItens);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 380, 550, 290);

        jLabel4.setFont(new java.awt.Font("Unispace", 0, 12)); // NOI18N
        jLabel4.setText("LISTAGEM DOS ITENS DO PEDIDO:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 360, 270, 15);

        jLabel6.setText("BUSCA:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(300, 350, 60, 16);

        buscaItens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaItensActionPerformed(evt);
            }
        });
        jPanel1.add(buscaItens);
        buscaItens.setBounds(350, 350, 210, 22);

        excluir.setText("EXCLUIR");
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });
        jPanel1.add(excluir);
        excluir.setBounds(570, 410, 110, 22);

        buscar.setText("BUSCAR");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        jPanel1.add(buscar);
        buscar.setBounds(570, 350, 110, 22);

        editar.setText("EDITAR");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });
        jPanel1.add(editar);
        editar.setBounds(570, 380, 110, 22);

        msgGenerica.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        msgGenerica.setForeground(new java.awt.Color(255, 0, 51));
        msgGenerica.setText("POR FAVOR, PREENCHA O CAMPO (RAIO/LADO) OU QUANTIDADE");
        jPanel1.add(msgGenerica);
        msgGenerica.setBounds(250, 140, 370, 16);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel7);
        jLabel7.setBounds(-3, -4, 700, 720);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        try {
            String strSabor1 = tabelaItens.getValueAt(tabelaItens.getSelectedRow(), 1).toString();
            String strSabor2 = tabelaItens.getValueAt(tabelaItens.getSelectedRow(), 3).toString();
            for (int i=0; i<sabor1Cb.getItemCount(); i++) {
                if (sabor1Cb.getItemAt(i).equals(strSabor1)) {
                    sabor1Cb.setSelectedIndex(i);
                    break;
                }
            }
            for (int i=0; i<sabor2Cb.getItemCount(); i++) {
                if (sabor2Cb.getItemAt(i).equals(strSabor2)) {
                    sabor2Cb.setSelectedIndex(i);
                    break;
                }
            }
            String forma = tabelaItens.getValueAt(tabelaItens.getSelectedRow(), 5).toString();
            if(forma.equals("TRIÂNGULO")){
                triangulotp.setSelected(true);
            }else if(forma.equals("CIRCULO")){
                circulotp.setSelected(true);
            }else if(forma.equals("QUADRADO")){
                quadradotp.setSelected(true);
            }

            ValorTotal.setText(tabelaItens.getValueAt(tabelaItens.getSelectedRow(), 6).toString());
            ValorTotal.setVisible(true);

            this.id_item_pedido = Integer.parseInt(tabelaItens.getValueAt(tabelaItens.getSelectedRow(), 0).toString());
        } catch (Exception ex) {
            lbErroItem.setVisible(true);
        }
    }//GEN-LAST:event_editarActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        imprimeTodosPedidosItens(id_cliente);
    }//GEN-LAST:event_buscarActionPerformed

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        try {
            Connection con;
            try {
                con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
                new PedidoItemDaoImpl(con).removerPedidoItem(Integer.parseInt(tabelaItens.getValueAt(tabelaItens.getSelectedRow(), 0).toString()));
                con.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            lbErroItem.setVisible(false);
            imprimeTodosPedidosItens(id_cliente);
        } catch (Exception ex) {
            lbErroItem.setVisible(true);
        }
    }//GEN-LAST:event_excluirActionPerformed

    private void buscaItensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaItensActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscaItensActionPerformed

    private void sabor1CbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sabor1CbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sabor1CbActionPerformed

    private void sabor2CbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sabor2CbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sabor2CbActionPerformed

    private void fecharBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fecharBtnActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_fecharBtnActionPerformed

    private void AdicionarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarPedidoActionPerformed
        Connection con;
        try {
            con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);

            if(dimensaotf.getText().isEmpty() && quantidadetf.getText().isEmpty()){
                msgGenerica.setVisible(true);
                return;
            }else{
                msgGenerica.setVisible(false);
            }

            //inserção do pedido
            Pedido pd = new Pedido();
            pd.setIdCliente(this.id_cliente);
            pd.setStatus(1);
            PedidoDao pDao = new PedidoDaoImpl(con);
            pDao.InserirPedido(pd);

            PedidoDaoImpl pDaoImp = new PedidoDaoImpl(con);
            int idPedido = pDaoImp.GetIdPedidoByIdCliente(this.id_cliente);
            int formaId = 1;
            FormaPizza forma = null;

            if(!dimensaotf.getText().isEmpty()){
                int dimensao = Integer.parseInt(dimensaotf.getText());

                if(circulotp.isSelected()){
                    if(dimensao < 7 || dimensao > 23){
                        lbErroDimensao.setText("A dimensão não pode ser MENOR que 7 cm e MAIOR que 23 cm.");
                        lbErroDimensao.setVisible(true);
                        return;
                    }else{
                        lbErroDimensao.setVisible(false);
                    }
                    forma = new PizzaRedonda();
                    formaId = 1;
                }else if(quadradotp.isSelected()){
                    if(dimensao < 10 || dimensao > 40){
                        lbErroDimensao.setText("A dimensão não pode ser MENOR que 10 cm e MAIOR que 40 cm.");
                        lbErroDimensao.setVisible(true);
                        return;
                    }else{
                        lbErroDimensao.setVisible(false);
                    }

                    forma = new PizzaQuadrada();
                    formaId = 2;
                }else if(triangulotp.isSelected()){
                    if(dimensao < 20 || dimensao > 60){
                        lbErroDimensao.setText("A dimensão não pode ser MENOR que 20 cm e MAIOR que 60 cm.");
                        lbErroDimensao.setVisible(true);
                        return;
                    }else{
                        lbErroDimensao.setVisible(false);
                    }

                    forma = new PizzaTriangular();
                    formaId = 3;
                }
                PedidoItem itemPedido = new PedidoItem();
                forma.setMedida(Double.parseDouble(dimensaotf.getText()));
                itemPedido.setMedida(forma.getMedida());
                itemPedido.setArea(forma.getArea());
                itemPedido.setForma(forma);
                itemPedido.setSabor1(getSaborBySelected(sabor1Cb.getSelectedIndex()));
                itemPedido.setSabor2(getSaborBySelected(sabor2Cb.getSelectedIndex()));
                itemPedido.setValor(calculaValorItemPedido(itemPedido));
                itemPedido.setIdPedido(idPedido);
                itemPedido.setFormaId(formaId);

                con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
                PedidoItemDao pdIDao = new PedidoItemDaoImpl(con);
                if (id_item_pedido != 0){
                    itemPedido.setId(id_item_pedido);
                    pdIDao.AtualizarPedidoItem(itemPedido);
                }else{
                    pdIDao.InserirPedidoItem(itemPedido);
                }

                Locale localeBR = new Locale( "pt", "BR" );
                NumberFormat dinheiroBR = NumberFormat.getCurrencyInstance(localeBR);
                Double currentTotal = itemPedido.getValor();
                ValorTotal.setText(dinheiroBR.format(currentTotal));
                ValorTotal.setVisible(true);
            }else{
                int quantidade = Integer.parseInt(quantidadetf.getText());
                if(circulotp.isSelected()){
                    forma = new PizzaRedonda();
                    formaId = 1;
                }else if(quadradotp.isSelected()){
                    forma = new PizzaQuadrada();
                    formaId = 2;
                }else if(triangulotp.isSelected()){
                    forma = new PizzaTriangular();
                    formaId = 3;
                }

                if(quantidade < 100 || quantidade > 1600){
                    lbErroQuantidade.setText("A quantidade não pode ser MENOR que 100 cm² e MAIOR que 1600 cm².");
                    lbErroQuantidade.setVisible(true);
                    return;
                }else{
                    lbErroQuantidade.setVisible(false);
                }

                PedidoItem itemPedido = new PedidoItem();
                forma.setArea(Double.parseDouble(quantidadetf.getText()));
                itemPedido.setMedida(forma.getMedida());
                itemPedido.setArea(forma.getArea());
                itemPedido.setForma(forma);
                itemPedido.setSabor1(getSaborBySelected(sabor1Cb.getSelectedIndex()));
                itemPedido.setSabor2(getSaborBySelected(sabor2Cb.getSelectedIndex()));
                itemPedido.setValor(calculaValorItemPedido(itemPedido));
                itemPedido.setIdPedido(idPedido);
                itemPedido.setFormaId(formaId);

                con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
                PedidoItemDao pdIDao = new PedidoItemDaoImpl(con);
                if (id_item_pedido != 0){
                    itemPedido.setId(id_item_pedido);
                    pdIDao.AtualizarPedidoItem(itemPedido);
                }else{
                    pdIDao.InserirPedidoItem(itemPedido);
                }

                telaPrincipal.imprimeTodos();

                int IntMedida = (int) Math.round(forma.getMedida());
                dimensaotf.setText(String.valueOf(IntMedida));
                Locale localeBR = new Locale( "pt", "BR" );
                NumberFormat dinheiroBR = NumberFormat.getCurrencyInstance(localeBR);
                Double currentTotal = itemPedido.getValor();
                ValorTotal.setText(dinheiroBR.format(currentTotal));
                ValorTotal.setVisible(true);
            }
            telaPrincipal.imprimeTodosPedidos();
            imprimeTodosPedidosItens(id_cliente);
            con.close();
        }catch (NumberFormatException e) {
            if(!pattern.matcher(dimensaotf.getText()).matches() && !dimensaotf.getText().isEmpty()){
                lbErroDimensao.setText("Por favor, o campo deve ser um inteiro.");
                lbErroDimensao.setVisible(true);
            }

            if(!pattern.matcher(quantidadetf.getText()).matches() && !quantidadetf.getText().isEmpty()){
                lbErroQuantidade.setText("Por favor, o campo deve ser um inteiro.");
                lbErroQuantidade.setVisible(true);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PizzaForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AdicionarPedidoActionPerformed

    private void triangulotpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangulotpActionPerformed
        dimensaotf.setText("");
        if(triangulotp.isSelected())
        labelForma.setText("Entre com o lado (cm)");
    }//GEN-LAST:event_triangulotpActionPerformed

    private void quadradotpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quadradotpActionPerformed
        dimensaotf.setText("");
        if(quadradotp.isSelected())
        labelForma.setText("Entre com o lado (cm)");
    }//GEN-LAST:event_quadradotpActionPerformed

    private void circulotpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circulotpActionPerformed
        dimensaotf.setText("");
        if(circulotp.isSelected())
        labelForma.setText("Entre com o raio (cm)");
    }//GEN-LAST:event_circulotpActionPerformed

    private void selectItemByString(String s) {
   
    return;
  }
    
    public Double calculaValorItemPedido(PedidoItem item) throws SQLException, IOException, ClassNotFoundException{
        Connection con;
        con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
        TipoDaoImpl t = new TipoDaoImpl(con);
        if(item.getSabor1().getTipo() == item.getSabor2().getTipo()){
            Double valor = t.findValorByTipo(item.getSabor1().getTipo());
            return valor * item.getArea();
        }else{
            Double valor1 = t.findValorByTipo(item.getSabor1().getTipo());
            Double valor2 = t.findValorByTipo(item.getSabor2().getTipo());
            return ((valor1+valor2)/2)*item.getArea();
        }
    }
       
    public Sabor getSaborBySelected(int sel) throws IOException, ClassNotFoundException, SQLException{
        Connection con;
        con = ConnectionFactory.getConnection("jdbc:mysql://localhost:3307/db_pizza", "root", "", ConnectionFactory.MYSQL);
        SaborDao sDao = new SaborDaoImpl(con);
        List<Sabor> sabores = sDao.buscarTodos("");
        return sabores.get(sel);
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdicionarPedido;
    private javax.swing.JLabel ValorTotal;
    private javax.swing.JTextField buscaItens;
    private javax.swing.JButton buscar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton circulotp;
    private javax.swing.JTextField dimensaotf;
    private javax.swing.JButton editar;
    private javax.swing.JButton excluir;
    private javax.swing.JButton fecharBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel labelForma;
    private javax.swing.JLabel lbErroDimensao;
    private javax.swing.JLabel lbErroItem;
    private javax.swing.JLabel lbErroQuantidade;
    private javax.swing.JLabel lbErroSabor;
    private javax.swing.JLabel msgGenerica;
    private javax.swing.JRadioButton quadradotp;
    private javax.swing.JTextField quantidadetf;
    private javax.swing.JComboBox<String> sabor1Cb;
    private javax.swing.JComboBox<String> sabor2Cb;
    private javax.swing.JTable tabelaItens;
    private javax.swing.JRadioButton triangulotp;
    // End of variables declaration//GEN-END:variables
}
